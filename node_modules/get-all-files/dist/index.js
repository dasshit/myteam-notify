import e from"fs";import{sep as o,resolve as r}from"path";const t=e.promises,n=({resolve:e=!1,isExcludedDir:o=(()=>!1)}={})=>({resolve:e,isExcludedDir:o}),i=(e,t)=>(!0===t.resolve&&(e=r(e)),e.length>0&&e[e.length-1]!==o&&(e+=o),e),s=(r,t)=>{t=n(t);const s={*[Symbol.iterator](){e.lstatSync(r).isDirectory()?yield*function*r(n){if(!t.isExcludedDir(n))for(const t of e.readdirSync(n,{withFileTypes:!0})){const e=n+t.name;t.isDirectory()?yield*r(e+o):yield e}}(i(r,t)):yield r},toArray:()=>[...s]};return s};function l(r,t,n,i){if(0===r.length)return void(n.done=!0);const s=[];let c=r.length;for(const d of r)i.isExcludedDir(d)||e.readdir(d,{withFileTypes:!0},((e,r)=>{if(null==e){for(const e of r){const r=d+e.name;e.isDirectory()?s.push(r+o):t.push(r)}n.resolve(),0==--c&&l(s,t,n,i)}else n.reject(e)}))}const c=(e,o)=>{o=n(o);const r={async*[Symbol.asyncIterator](){if(!(await t.lstat(e)).isDirectory())return void(yield e);const r=[],n=function(){let e=!1,o=()=>{},r=()=>{},t=new Promise(((e,t)=>{o=e,r=t}));return{resolve(){const e=o;t=new Promise(((e,t)=>{o=e,r=t})),e()},reject(e){r(e)},get done(){return e},set done(o){e=o},onResolved:()=>t}}();l([i(e,o)],r,n,o);do{for(await n.onResolved();r.length>0;)yield r.pop()}while(!n.done)},toArray:async()=>{const e=[];for await(const o of r)e.push(o);return e}};return r};export{c as getAllFiles,s as getAllFilesSync};
